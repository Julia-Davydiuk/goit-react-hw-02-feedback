{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","className","styles","span","defaultProps","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","name","button","Notification","message","App","state","e","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","ceil","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"wPAeeA,EAZC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,oCACI,6BAAKD,IACJC,M,gBCFHC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,qCACI,uBAAMC,UAAWC,IAAOC,KAAxB,mBAAqCP,KACrC,uBAAMK,UAAWC,IAAOC,KAAxB,sBAAwCN,KACxC,uBAAMI,UAAWC,IAAOC,KAAxB,kBAAoCL,KACpC,uBAAMG,UAAWC,IAAOC,KAAxB,oBAAsCJ,OACtC,uBAAME,UAAWC,IAAOC,KAAxB,gCAAkDH,IAAlD,WAIRL,EAAWS,aAAe,CACxBR,KAAM,EACNC,QAAS,EACTC,IAAK,GAWQH,Q,gBCJAU,EApBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACxB,8BACID,EAAQE,KAAI,SAAEC,GAAF,OACR,wBAEIC,KAAK,SACLC,QAASJ,EACTK,KAAMH,EACNR,UAAWC,IAAOW,OALtB,SAMKJ,GALIA,SCGFK,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,+BAAQA,KCuDGC,G,kNAlDXC,MAAQ,CACJrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTS,gBAAkB,SAACW,GACf,IAAMN,EAAOM,EAAEC,OAAOP,KACtB,EAAKQ,UAAS,SAAAC,GAAS,sBAClBT,EAAOS,EAAUT,GAAQ,O,EAIlCU,mBAAqB,WAEjB,OADmBC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAIrFC,gCAAkC,WAE9B,OAD2BC,KAAKC,KAAM,EAAKb,MAAMrB,KAAO,EAAK0B,qBAAwB,M,4CAIzF,WACI,OACI,sBAAKrB,UAAU,YAAf,UACI,cAAC,EAAD,CAASR,MAAM,wBAAf,SACI,cAAC,EAAD,CACIa,QAASiB,OAAOQ,KAAKC,KAAKf,OAC1BV,gBAAiByB,KAAKzB,oBAG9B,cAAC,EAAD,CAASd,MAAM,aAAf,SACKuC,KAAKV,qBACF,cAAC,EAAD,CACA1B,KAAMoC,KAAKf,MAAMrB,KACjBC,QAASmC,KAAKf,MAAMpB,QACpBC,IAAKkC,KAAKf,MAAMnB,IAChBC,MAAOiC,KAAKV,mBACZtB,mBAAoBgC,KAAKJ,kCAEzB,cAAC,EAAD,CAAcb,QAAQ,+B,GA1C5BkB,cCJlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.af64a9b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({title, children}) => (\r\n    <section>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </section>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage}) => (\r\n    <>\r\n        <span className={styles.span}>Good: {good}</span>\r\n        <span className={styles.span}>Neutral: {neutral}</span>\r\n        <span className={styles.span}>Bad: {bad}</span>\r\n        <span className={styles.span}>Total: {total()}</span>\r\n        <span className={styles.span}>Positive feedback: {positivePercentage()}%</span>\r\n    </>\r\n);\r\n\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.func,\r\n    positivePercentage: PropTypes.func,\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) => (\r\n<div>\r\n   {options.map(( option ) => (\r\n        <button\r\n            key={option}\r\n            type=\"button\"\r\n            onClick={onLeaveFeedback}\r\n            name={option}\r\n            className={styles.button}>\r\n            {option}\r\n        </button>\r\n    ))} \r\n</div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n    <span>{ message }</span>\r\n);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\r\n\r\nimport Section from './components/Section'\r\nimport Statistics from './components/Statistics';\r\nimport FeedbackOptions from './components/FeedbackOptions';\r\nimport Notification from './components/Notification';\r\nimport './Container.css';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n    };\r\n\r\n    onLeaveFeedback = (e) => {\r\n        const name = e.target.name;\r\n        this.setState(prevState => ({\r\n            [name]: prevState[name] + 1,\r\n        }));\r\n    };\r\n\r\n    countTotalFeedback = () => {\r\n        const totalValue = Object.values(this.state).reduce((acc, value) => acc + value, 0);\r\n        return totalValue;\r\n    };\r\n\r\n    countPositiveFeedbackPercentage = () => {\r\n        const positivePercentage = Math.ceil((this.state.good / this.countTotalFeedback()) * 100);\r\n        return positivePercentage;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Container\">\r\n                <Section title=\"Please leave feedback\">\r\n                    <FeedbackOptions\r\n                        options={Object.keys(this.state)}\r\n                        onLeaveFeedback={this.onLeaveFeedback}/>\r\n                </Section>\r\n                \r\n                <Section title=\"Statistics\">\r\n                    {this.countTotalFeedback() ? (\r\n                        <Statistics\r\n                        good={this.state.good}\r\n                        neutral={this.state.neutral}\r\n                        bad={this.state.bad}\r\n                        total={this.countTotalFeedback}\r\n                        positivePercentage={this.countPositiveFeedbackPercentage}/>\r\n                    ) : (\r\n                        <Notification message=\"No feedback given\" />\r\n                    )}\r\n                    \r\n                </Section>\r\n            </div>  \r\n        );\r\n    };\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Statistics_span__tL5qH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__26jHE\"};"],"sourceRoot":""}